import{X as a}from"./TLrzNzNC.js";import{u as s}from"./Qxab9yUf.js";const h=a("cart",{state:()=>({cartList:[]}),getters:{authStore(){return s()}},actions:{loadFromLocalStorage(){const t=localStorage.getItem("cart");this.cartList=t?JSON.parse(t):[]},saveToLocalStorage(){localStorage.setItem("cart",JSON.stringify(this.cartList))},addItem(t,e){const r=this.cartList.findIndex(o=>o.id===t.id);r!==-1?this.cartList[r]={...this.cartList[r],count:this.cartList[r].count+e}:this.cartList.push({...t,count:e}),this.saveToStorage()},updateItemCount(t,e){const r=this.cartList.findIndex(o=>o.id===t);r!==-1&&(this.cartList[r]={...this.cartList[r],count:e},this.saveToStorage())},removeItem(t){this.cartList=this.cartList.filter(e=>e.id!==t),this.saveToStorage()},loadFromStorage(){if(this.authStore.authenticated)try{console.log("Fetching cart from API for authenticated user")}catch(t){console.error("Error fetching cart from API:",t),this.loadFromLocalStorage()}else this.loadFromLocalStorage()},saveToStorage(){if(this.authStore.authenticated)try{console.log("Saving cart to API for authenticated user")}catch(t){console.error("Error saving cart to API:",t),this.saveToLocalStorage()}else this.saveToLocalStorage()}}});export{h as u};
